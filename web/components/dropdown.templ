package components

import (
	"context"
	"fmt"
	"io"
)

type _dropdownState _inputState

func (s *_dropdownState) Render(ctx context.Context, w io.Writer) error {
	return _dropdownTempl(s).Render(ctx, w)
}

func Dropdown(name, value string, opts ..._inputStateOpt) templ.Component {
	opts = append(opts, WithName(name), WithValue(value))

	s := newInputState(opts...)

	return (*_dropdownState)(s)
}

func _dropdownGetData(s *_dropdownState) string {

	label := ""

	for _, opt := range s.options {
		if opt[1] == s.value {
			label = opt[0]
			break
		}
	}

	return fmt.Sprintf("{open: false, value: '%s', label: '%s', placeholder: '%s'}",
		s.value,
		label,
		s.placeholder)
}

templ _dropdownTempl(s *_dropdownState) {
	<div
		class="dropdown"
		if s.id != "" {
			id={ s.id }
		}
		if s.hxGet != "" {
			hx-get={ s.hxGet }
		}
		if s.hxPost != "" {
			hx-post={ s.hxPost }
		}
		if s.hxTarget != "" {
			hx-target={ s.hxTarget }
		}
		if s.hxTrigger != "" {
			hx-trigger={ s.hxTrigger }
		}
		if s.hxSwap != "" {
			hx-swap={ s.hxSwap }
		}
		x-data={ _dropdownGetData(s) }
		x-bind:data-value="value"
		x-ref="dropdown"
	>
		<input x-ref="input" x-model="value" class="dropdown__input" type="hidden" name={ s.name }/>
		<label
			id="listbox-label"
			class="block text-sm/6 font-medium text-gray-900"
			x-bind:class={ fmt.Sprintf("{'hidden': '%s' === ''}", s.label) }
		>
			{ s.label }
		</label>
		<div
			x-bind:class="{ 'dropdown--opened': open }"
			class="relative group"
		>
			<button
				type="button"
				class="dropdown__button relative w-full cursor-pointer rounded-md bg-white py-1.5 pl-3 pr-10 text-left text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-sm/6"
				aria-haspopup="listbox"
				aria-expanded="false"
				aria-labelledby="listbox-label"
				x-on:click="open = !open"
				x-on:blur="open = false"
			>
				<span
					x-bind:class="{ 'text-gray-600': value === '' }"
					x-text="value === '' ? placeholder : label"
					class="dropdown__button__text block truncate"
				></span>
				<span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
					<svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
						<path fill-rule="evenodd" d="M10.53 3.47a.75.75 0 0 0-1.06 0L6.22 6.72a.75.75 0 0 0 1.06 1.06L10 5.06l2.72 2.72a.75.75 0 1 0 1.06-1.06l-3.25-3.25Zm-4.31 9.81 3.25 3.25a.75.75 0 0 0 1.06 0l3.25-3.25a.75.75 0 1 0-1.06-1.06L10 14.94l-2.72-2.72a.75.75 0 0 0-1.06 1.06Z" clip-rule="evenodd"></path>
					</svg>
				</span>
			</button>
			<ul
				class="hidden group-[.dropdown--opened]:block absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"
				tabindex="-1"
				role="listbox"
				aria-labelledby="listbox-label"
				aria-activedescendant="listbox-option-3"
			>
				for _, option := range s.options {
					<li
						class="group relative select-none py-2 pl-8 pr-4 text-gray-900 cursor-pointer hover:bg-indigo-600 hover:text-white"
						role="option"
						x-bind:class={ fmt.Sprintf("{'selected': value === '%s'}", option[1]) }
						x-on:mousedown={ fmt.Sprintf("$refs.input.value = value = '%s'; label = '%s'; open: false; $refs.dropdown.dispatchEvent(new Event('change'))", option[1], option[0]) }
					>
						<span
							class="block truncate font-normal group-[.selected]:font-semibold"
						>
							{ option[0] }
						</span>
						<span class="hidden group-[.selected]:flex absolute inset-y-0 left-0 items-center pl-1.5 text-indigo-600 hover:text-white">
							<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
								<path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z" clip-rule="evenodd"></path>
							</svg>
						</span>
					</li>
				}
			</ul>
		</div>
	</div>
}
