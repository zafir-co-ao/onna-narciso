package pages

import (
	"fmt"
	"github.com/zafir-co-ao/onna-narciso/internal/scheduling"
	_scheduling "github.com/zafir-co-ao/onna-narciso/web/scheduling/components"
	"github.com/zafir-co-ao/onna-narciso/web/sessions/components"
	_components "github.com/zafir-co-ao/onna-narciso/web/shared/components"
)

var getDailyAppointmentsHandle = templ.NewOnceHandle()

templ DailyAppointments(date string, opts []_components.DailyAppointmentOptions) {
	@getDailyAppointmentsHandle.Once() {
		<script type="text/javascript">
		    document.addEventListener("htmx:afterOnLoad", (evt) => {
				let xhr = evt.detail.xhr

                let header = xhr.getResponseHeader("X-Reload-Page");

                if (!header) return

				let date = document.querySelector("[name='current-date']")

				if (!date) return

                htmx.ajax("GET", "/daily-appointments", {
                    target: '#daily-view',
                    swap: 'outerHTML',
                    values: { date: date.value },
                })
			})
    	</script>
	}
	@_components.Navbar("navbar", "Agenda", "#content")
	<div id="daily-view">
		<h2 class="text-base font-semibold leading-6 text-gray-900">Agendamentos do dia</h2>
		<div class="lg:grid lg:grid-cols-12 lg:gap-x-16">
			<div class="mt-10 text-center lg:col-start-8 lg:col-end-13 lg:row-start-1 lg:mt-9 xl:col-start-9">
				<input type="hidden" name="current-date" value={ date }/>
				@_scheduling.Calendar(_scheduling.CalendarState{
					Date:      date,
					HxGet:     "/daily-appointments",
					HxTarget:  "#daily-view",
					HxSwap:    "outerHTML",
					HxTrigger: "click",
				})
				<a
					hx-get={ fmt.Sprintf("/weekly-appointments?date=%v", date) }
					hx-target="#daily-view"
					hx-trigger="click"
					hx-swap="outerHTML"
					class="btn-lg btn-primary mt-8"
				>
					Ver Semana
				</a>
			</div>
			<ol class="mt-4 divide-y divide-gray-100 text-sm leading-6 lg:col-span-7 xl:col-span-8">
				for _, opt := range opts {
					if opt.AppointmentStatus == string(scheduling.StatusScheduled) {
						@DailyAppointment(opt)
					}
				}
			</ol>
			<ol class="mt-16 divide-y divide-gray-100 text-sm leading-6 lg:col-span-7 xl:col-span-8">
				for _, opt := range opts {
					if opt.AppointmentStatus != string(scheduling.StatusScheduled) {
						@DailyAppointment(opt)
					}
				}
			</ol>
		</div>
	</div>
	<dialog id="dialog" hx-swap-oob="true"></dialog>
}

templ DailyAppointment(o _components.DailyAppointmentOptions) {
	<li class="relative flex space-x-6 py-6 xl:static">
		<div class="flex-auto">
			<h3
				hx-get={ fmt.Sprintf("/scheduling/dialogs/edit-appointment-dialog/%v", o.AppointmentID) }
				hx-trigger="click"
				hx-swap="none"
				class="pr-10 font-semibold text-gray-900 underline cursor-pointer xl:pr-0"
			>
				{ o.CustomerName } - { o.AppointmentStatus }
			</h3>
			<dl class="mt-2 flex flex-col text-gray-500 xl:flex-row">
				<div class="flex items-start space-x-3">
					<dt class="mt-0.5">
						<span class="sr-only">Date</span>
						<svg
							class="h-5 w-5 text-gray-400"
							viewBox="0 0 20 20"
							fill="currentColor"
							aria-hidden="true"
							data-slot="icon"
						>
							<path
								fill-rule="evenodd"
								d="M5.75 2a.75.75 0 0 1 .75.75V4h7V2.75a.75.75 0 0 1 1.5 0V4h.25A2.75 2.75 0 0 1 18 6.75v8.5A2.75 2.75 0 0 1 15.25 18H4.75A2.75 2.75 0 0 1 2 15.25v-8.5A2.75 2.75 0 0 1 4.75 4H5V2.75A.75.75 0 0 1 5.75 2Zm-1 5.5c-.69 0-1.25.56-1.25 1.25v6.5c0 .69.56 1.25 1.25 1.25h10.5c.69 0 1.25-.56 1.25-1.25v-6.5c0-.69-.56-1.25-1.25-1.25H4.75Z"
								clip-rule="evenodd"
							></path>
						</svg>
					</dt>
					<dd>
						<time>
							{ o.AppointmentDate } Ã s { o.AppointmentHour }
						</time>
					</dd>
				</div>
				<div class="mt-2 flex items-start space-x-3 xl:ml-3.5 xl:mt-0 xl:border-l xl:border-gray-400 xl:border-opacity-50 xl:pl-3.5">
					<dt class="mt-0.5">
						<span class="sr-only">
							Service
						</span>
						<svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z"></path>
							<path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6Z"></path>
						</svg>
					</dt>
					<dd>
						{ o.ServiceName }
					</dd>
				</div>
				<div class="mt-2 flex items-start space-x-3 xl:ml-3.5 xl:mt-0 xl:border-l xl:border-gray-400 xl:border-opacity-50 xl:pl-3.5">
					<dt class="mt-0.5">
						<span class="sr-only">
							Profissional
						</span>
						<svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"></path>
						</svg>
					</dt>
					<dd>
						{ o.ProfessionalName }
					</dd>
				</div>
			</dl>
		</div>
		@components.SessionAction(
			o.AppointmentID,
			components.WithID(o.SessionID),
			components.WithStatus(o.SessionStatus),
			components.WithAppointmentDate(o.AppointmentDate),
			components.WithAppointmentStatus(o.AppointmentStatus),
			components.WithHxPost("/sessions"),
			components.WithHxPut(fmt.Sprintf("/sessions/%v", o.SessionID)),
			components.WithHxDelete(fmt.Sprintf("/sessions/%v", o.SessionID)),
			components.WithHxGet(fmt.Sprintf("/sessions/dialogs/close-session-dialog/%v", o.SessionID)),
			components.WithSessionCloseHxTarget("#dialog"),
			components.WithSessionCloseHxSwap("outerHTML"),
			components.WithHxTarget("#content"),
			components.WithHxSwap("innerHTML"),
		)
	</li>
}
