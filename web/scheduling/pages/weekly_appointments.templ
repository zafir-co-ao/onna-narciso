package pages

import (
	"fmt"
	"github.com/zafir-co-ao/onna-narciso/internal/scheduling"
	_components "github.com/zafir-co-ao/onna-narciso/web/scheduling/components"
	"github.com/zafir-co-ao/onna-narciso/web/shared/components"
	"time"
)

var weekDays = map[time.Weekday]string{
	time.Sunday:    "Domingo",
	time.Monday:    "Segunda-feira",
	time.Tuesday:   "Terça-feira",
	time.Wednesday: "Quarta-feira",
	time.Thursday:  "Quinta-feira",
	time.Friday:    "Sexta-feira",
	time.Saturday:  "Sábado",
}

func getDaysOfMonthFromMonday(date string, days int) [][]string {
	var d [][]string
	t, _ := time.Parse("2006-01-02", date)

	if t.Weekday() != time.Monday {
		for t.Weekday() != time.Monday {
			t = t.AddDate(0, 0, -1)
		}
	}

	for i := 0; i < days; i++ {
		weekday := t.Weekday()
		d = append(d, []string{fmt.Sprintf("%d", t.Day()), weekDays[weekday]})
		t = t.AddDate(0, 0, +1)
	}
	return d
}

func getDayOfWeek(day, today string) string {
	t, _ := time.Parse("2006-01-02", today)
	y, m, _ := t.Date()

	if len(day) == 1 {
		day = "0" + day
	}

	return fmt.Sprintf("%v-%v-%v", y, int(m), day)
}

func getMonthYear(date string) string {
	t, _ := time.Parse("2006-01-02", date)
	tz, _ := time.LoadLocation("Africa/Luanda")

	return t.In(tz).Format("January 2006")
}

type WeeklyAppointmentsOptions struct {
	Date           string
	ServiceID      string
	ProfessionalID string
	Days           int
	StartHour      int
	EndHour        int
	Services       []scheduling.Service
	Professionals  []scheduling.Professional
	Appointments   []scheduling.AppointmentOutput
}

var getAppointmentDialogHandle = templ.NewOnceHandle()
var getAppointmentDatetimeHandle = templ.NewOnceHandle()
var getWeeklyAppointmentsHandle = templ.NewOnceHandle()

templ WeeklyAppointments(opts WeeklyAppointmentsOptions) {
	@getWeeklyAppointmentsHandle.Once() {
		<script type="text/javascript">
		    document.addEventListener("htmx:afterOnLoad", (evt) => {
				let xhr = evt.detail.xhr

                let header = xhr.getResponseHeader("X-Operation");

                if (!header) return

				let date = document.querySelector("[name='date']").value
    			let serviceId = document.querySelector("[name='service-id']").value
    			let professionalId = document.querySelector("[name='professional-id']").value

    	        htmx.ajax("GET", "/weekly-appointments", {
                    target: '#content',
                    swap: 'innerHTML',
                    values: {
                        'date': date,
                        'service-id': serviceId,
                        'professional-id': professionalId,
                        'previous-date': date,
                        'previous-service-id': serviceId,
                        'previous-professional-id': professionalId
                    }
                })
			})
		</script>
	}
	@getAppointmentDialogHandle.Once() {
		<script type="text/javascript">
		    function getAppointmentDialog(event) {

				const { date, hour } = getAppointmentDatetime(event)

                htmx.ajax("GET", "/scheduling/dialogs/schedule-appointment-dialog", {
                  target: "#appointments",
                  swap: "none",
                  values: {
                    'service-id': document.querySelector("[name='service-id']").value,
                    'professional-id': document.querySelector("[name='professional-id']").value,
                    'date': date,
                    'hour': hour,
                    'hx-post': '/appointments'
                }})
			}

		</script>
	}
	@getAppointmentDatetimeHandle.Once() {
		<script type="text/javascript">
        function getAppointmentDatetime(event) {
            const calendar = event.target;

            const initialDate = Date.parse(document.querySelector("[data-week-day]").dataset.weekDay)
            const days = parseInt(document.querySelector("[name='days']").value)
            const startHour = parseInt(document.querySelector("[name='start-hour']").value)
            const timeSlots = parseInt(document.querySelector("[data-rows]").dataset.rows)

            const dateSlot = calendar.clientWidth / days;
            let timeSlot = calendar.clientHeight / timeSlots;

            const addDate = Math.floor(event.layerX / dateSlot);
            let addSlots = Math.floor(event.layerY / timeSlot - 3);

            if (addSlots === -1) {
              addSlots = 0;
            }

            let hour = startHour + Math.floor(addSlots/4);
            const minutes = (addSlots % 4) * 15;

            let date = new Date(initialDate + addDate * 24 * 60 * 60 * 1000)
            hour = `${hour.toString().length == 2 ? hour : '0' + hour.toString()}:${minutes === 0 ? '00' : minutes }`

            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();

            return {date: `${year}-${month}-${day}`, hour}
        }

        </script>
	}
	<div id="weekly-view">
		<header class="flex flex-none items-center justify-between border-b border-gray-200 px-6 py-4">
			<h1 class="text-base font-semibold leading-6 text-gray-900">
				<time datetime={ opts.Date }>{ getMonthYear(opts.Date) }</time>
			</h1>
			<form
				hx-get="/weekly-appointments"
				hx-trigger="change from:#service_id,change from:#professional_id"
				hx-target="#weekly-view"
				hx-swap="outerHTML"
			>
				<input type="hidden" name="date" value={ opts.Date }/>
				<input type="hidden" name="previous-date" value={ opts.Date }/>
				<input type="hidden" name="start-hour" value={ fmt.Sprint(opts.StartHour) }/>
				<input type="hidden" name="end-hour" value={ fmt.Sprint(opts.EndHour) }/>
				<input type="hidden" name="days" value={ fmt.Sprint(opts.Days) }/>
				<div class="flex items-center gap-3">
					<div class="relative flex items-center rounded-md bg-white shadow-sm md:items-stretch">
						<button
							type="button"
							hx-get={ fmt.Sprintf("/weekly-appointments?operation=%v&date=%v", "previous-week", opts.Date) }
							hx-target="#weekly-view"
							hx-swap="outerHTML"
							hx-trigger="click"
							class="flex h-9 w-12 items-center justify-center rounded-l-md border-y border-l border-gray-300 pr-1 text-gray-400 hover:text-gray-500 focus:relative md:w-9 md:pr-0 md:hover:bg-gray-50"
						>
							<span class="sr-only">Previous week</span>
							<svg
								class="h-5 w-5"
								viewBox="0 0 20 20"
								fill="currentColor"
								aria-hidden="true"
								data-slot="icon"
							>
								<path
									fill-rule="evenodd"
									d="M11.78 5.22a.75.75 0 0 1 0 1.06L8.06 10l3.72 3.72a.75.75 0 1 1-1.06 1.06l-4.25-4.25a.75.75 0 0 1 0-1.06l4.25-4.25a.75.75 0 0 1 1.06 0Z"
									clip-rule="evenodd"
								></path>
							</svg>
						</button>
						<button
							type="button"
							class="hidden border-y border-gray-300 px-3.5 text-sm font-semibold text-gray-900 hover:bg-gray-50 focus:relative md:block"
						>
							Hoje
						</button>
						<span class="relative -mx-px h-5 w-px bg-gray-300 md:hidden"></span>
						<button
							hx-get={ fmt.Sprintf("/weekly-appointments?operation=%v&date=%v", "next-week", opts.Date) }
							hx-target="#weekly-view"
							hx-swap="outerHTML"
							hx-trigger="click"
							type="button"
							class="flex h-9 w-12 items-center justify-center rounded-r-md border-y border-r border-gray-300 pl-1 text-gray-400 hover:text-gray-500 focus:relative md:w-9 md:pl-0 md:hover:bg-gray-50"
						>
							<span class="sr-only">Next week</span>
							<svg
								class="h-5 w-5"
								viewBox="0 0 20 20"
								fill="currentColor"
								aria-hidden="true"
								data-slot="icon"
							>
								<path
									fill-rule="evenodd"
									d="M8.22 5.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.75.75 0 0 1-1.06-1.06L11.94 10 8.22 6.28a.75.75 0 0 1 0-1.06Z"
									clip-rule="evenodd"
								></path>
							</svg>
						</button>
					</div>
					<div class="hidden md:block">
						@components.Dropdown("service-id",
							opts.ServiceID,
							components.WithId("service_id"),
							components.WithOptions(components.InputOption{"[ Serviços ]", "all"}),
							components.WithOptions(components.ServicesToOptions(opts.Services)...),
						)
						<input type="hidden" name="previous-service-id" value={ opts.ServiceID }/>
					</div>
					<div class="hidden md:block">
						@components.Dropdown(
							"professional-id",
							opts.ProfessionalID,
							components.WithId("professional_id"),
							components.WithOptions(components.InputOption{"[ Profissionais ]", "all"}),
							components.WithOptions(components.ProfessionalsToOptions(opts.Professionals)...),
						)
						<input type="hidden" name="previous-professional-id" value={ opts.ProfessionalID }/>
					</div>
				</div>
			</form>
		</header>
		<div class="flex h-full flex-col border border-gray-100">
			<div class="isolate flex flex-auto flex-col overflow-auto bg-white">
				<div style="width: 165%" class="flex max-w-full flex-none flex-col sm:max-w-none md:max-w-full">
					<div class="sticky top-0 z-30 flex-none bg-white shadow ring-1 ring-black ring-opacity-5 sm:pr-8">
						<div class={ "grid text-sm leading-6 text-gray-500 sm:hidden", fmt.Sprintf("grid-cols-%v", opts.Days) }>
							for _, day := range getDaysOfMonthFromMonday(opts.Date, opts.Days) {
								<button type="button" class="flex flex-col items-center pb-3 pt-2">
									{ day[1] }
									<span class="mt-1 flex h-8 w-8 items-center justify-center font-semibold text-gray-900">
										{ day[0] }
									</span>
								</button>
							}
						</div>
						<div
							class={ "-mr-px hidden divide-x divide-gray-100 border-r border-gray-100 text-sm leading-6 text-gray-500 sm:grid", fmt.Sprintf("grid-cols-%v", opts.Days) }
						>
							<div class="col-end-1 w-14"></div>
							for _, day := range getDaysOfMonthFromMonday(opts.Date, opts.Days) {
								<div class="flex items-center justify-center py-3">
									<span>
										{ day[1] }
										<span class="items-center justify-center font-semibold text-gray-900 week-day-cell" data-week-day={ getDayOfWeek(day[0], opts.Date) }>
											{ day[0] }
										</span>
									</span>
								</div>
							}
						</div>
					</div>
					<div class="flex flex-auto">
						<div class="sticky left-0 z-10 w-14 flex-none bg-white ring-1 ring-gray-100"></div>
						<div class="grid flex-auto grid-cols-1 grid-rows-1">
							<!-- Horizontal lines -->
							<div
								class={ "col-start-1 col-end-2 row-start-1 grid",  fmt.Sprintf("week-view-rows-%v", (opts.EndHour-opts.StartHour)*4), templ.KV("bg-gray-100", opts.ProfessionalID == "all") }
							>
								<div class="row-span-1 border-b border-b-gray-300"></div>
								for i := opts.StartHour; i < opts.EndHour; i++ {
									<div class="border-b border-b-gray-100">
										<div
											data-time={ fmt.Sprintf("%d:00", i) }
											class="sticky left-0 z-20 -ml-14 -mt-2.5 w-14 pr-2 text-right text-xs leading-5 text-gray-400 hover:bg-gray-200 cursor-pointer"
										>
											{ fmt.Sprintf("%d:00", i) }
										</div>
									</div>
									<div class="border-b border-b-gray-100" data-time={ fmt.Sprintf("%d:15", i) }></div>
									<div class="border-b border-b-gray-100" data-time={ fmt.Sprintf("%d:30", i) }></div>
									<div class="border-b border-b-gray-300" data-time={ fmt.Sprintf("%d:45", i) }></div>
								}
								<div class="row-span-1"></div>
							</div>
							<!-- Vertical lines -->
							<div
								class={ "col-start-1 col-end-2 row-start-1 hidden grid-rows-1 divide-x divide-gray-100 sm:grid", fmt.Sprintf("grid-cols-%v", opts.Days) }
							>
								for i := 1; i <= opts.Days; i++ {
									<div class={ fmt.Sprintf("col-start-%d", i), "row-span-full" }></div>
								}
								<div class={ fmt.Sprintf("col-start-%d", opts.Days + 1),"row-span-full w-8" }></div>
							</div>
							<!-- Appointments -->
							<ol
								id="appointments"
								class={ "col-start-1 col-end-2 row-start-1 grid grid-cols-1 sm:pr-8", fmt.Sprintf("sm:grid-cols-%v", opts.Days), fmt.Sprintf("week-view-rows-%v", (opts.EndHour-opts.StartHour)*4) }
								data-rows={ fmt.Sprintf("%v", (opts.EndHour-opts.StartHour)*4+1) }
								if opts.ProfessionalID != "all" && opts.ServiceID != "all" {
									ondblclick="getAppointmentDialog(event)"
								}
							>
								for _, a := range opts.Appointments {
									@_components.Appointment(
										a,
										opts.StartHour,
										_components.WithHxGet(fmt.Sprintf("/scheduling/dialogs/edit-appointment-dialog/%v", a.ID)),
									)
								}
							</ol>
						</div>
					</div>
				</div>
			</div>
		</div>
		<dialog id="dialog" hx-swap-oob="true"></dialog>
	</div>
}
