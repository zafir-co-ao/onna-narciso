package components

import (
	"fmt"
	"github.com/zafir-co-ao/onna-narciso/internal/scheduling"
	"github.com/zafir-co-ao/onna-narciso/web/shared/components"
	"strconv"
)

type AppointmentReschedulerOptions struct {
	Appointment   scheduling.AppointmentOutput
	Professionals []scheduling.Professional
	Services      []scheduling.Service
}

func isCanceledOrClosed(opts AppointmentReschedulerOptions) bool {
	if opts.Appointment.Status == string(scheduling.StatusCanceled) {
		return true
	}

	if opts.Appointment.Status == string(scheduling.StatusClosed) {
		return true
	}

	return false
}

templ AppointmentReschedulerDialog(opts AppointmentReschedulerOptions) {
	if  isCanceledOrClosed(opts) {
		@components.Dialog("Ver marcação", AppointmentView(opts))
	} else {
		@components.Dialog("Editar marcação", AppointmentReschedulerForm(opts))
	}
}

templ AppointmentReschedulerForm(opts AppointmentReschedulerOptions) {
	<form hx-put={ fmt.Sprintf("/appointments/%v", opts.Appointment.ID) } hx-swap="none">
		<input type="hidden" name="id" value={ opts.Appointment.ID }/>
		<input type="hidden" name="week-day" value={ opts.Appointment.Date }/>
		@components.InputHiddenDisplay(opts.Appointment.CustomerName, "customer-name", opts.Appointment.CustomerName)
		<div class="mt-4">
			@components.Dropdown("service-id",
				opts.Appointment.ServiceID,
				components.WithId("service_id"),
				components.WithOptions(components.ServicesToOptions(opts.Services)...),
				components.WithHxOn("change", fmt.Sprintf("htmx.ajax('GET', '/scheduling/find-professionals', {target: '#professionals', swap: 'innerHTML', values: {'service-id': event.detail}})")),
			)
		</div>
		<div id="professionals" class="mt-4">
			@components.Dropdown("professional-id",
				opts.Appointment.ProfessionalID,
				components.WithOptions(components.ProfessionalsToOptions(opts.Professionals)...),
			)
		</div>
		<div class="mt-4">
			<input
				type="date"
				name="date"
				value={ opts.Appointment.Date }
				class="form-control"
			/>
		</div>
		<div class="mt-4">
			<input
				type="time"
				name="hour"
				value={ opts.Appointment.Hour }
				class="form-control"
			/>
		</div>
		<div class="mt-4">
			@components.Dropdown(
				"duration",
				strconv.Itoa(opts.Appointment.Duration),
				components.WithOptions(
					components.AppointmentDurations...,
				),
			)
		</div>
		<div class="bg-gray-100 mt-8 px-4 py-3 sm:flex sm:justify-between sm:flex-row sm:px-10 -mx-10">
			<button
				hx-delete={ fmt.Sprintf("/appointments/%v", opts.Appointment.ID) }
				hx-trigger="click"
				hx-swap="none"
				hx-confirm="Confirme para cancelar a marcação, essa operação não pode ser revertida."
				hx-on:htmx:after-swap="this.dispatchEvent(new CustomEvent('edit-appointment', {'bubbles': true}))"
				class="mt-3 inline-flex w-full justify-center rounded-md bg-red-500 px-3 py-2 text-sm font-semibold text-white shadow-sm ring-1 ring-inset ring-red-300 hover:bg-red-900 sm:mt-0 sm:w-auto"
			>
				Cancelar
			</button>
			<button
				class="inline-flex w-full justify-center rounded-md bg-gray-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-gray-500 sm:ml-3 sm:w-auto"
				type="submit"
			>
				Reagendar
			</button>
		</div>
	</form>
}

templ AppointmentView(opts AppointmentReschedulerOptions) {
	<div class="mb-4">
		@components.InputHiddenDisplay(opts.Appointment.CustomerName, "customer-name", opts.Appointment.CustomerName)
		@components.InputHiddenDisplay(opts.Appointment.ProfessionalName, "professional-name", opts.Appointment.ProfessionalName)
		@components.InputHiddenDisplay(opts.Appointment.ServiceName, "service-name", opts.Appointment.ProfessionalName)
		@components.InputHiddenDisplay(opts.Appointment.Date, "date", opts.Appointment.Date)
		@components.InputHiddenDisplay(opts.Appointment.Hour, "hour", opts.Appointment.Hour)
		@components.InputHiddenDisplay(
			components.FindDuration(strconv.Itoa(opts.Appointment.Duration))[0],
			"duration",
			components.FindDuration(strconv.Itoa(opts.Appointment.Duration))[0],
		)
	</div>
}
